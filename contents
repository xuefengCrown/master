编程中学到的模式，手段
1. 自顶向下设计方法
poker-hand

2. 如果想要在函数执行前做点什么
def timecall(fn, *args): # 跟 Peter Norvig 学的
  "Call function with args; return the time in seconds and result."
  t0 = time.clock()
  result = fn(*args)
  t1 = time.clock()
  return t1-t0, result, fn.__name__

带记忆功能的递归；
函数调用统计；

Python语言提供一个简单而强大的语法: ‘装饰器’。装饰器是一个函数或类，它可以 包装(或装饰)一个函数或方法。
被 ‘装饰’ 的函数或方法会替换原来的函数或方法。 由于在Python中函数是一等对象，它也可以被 ‘手动操作’，
但是使用@decorators 语法更清晰，因此首选这种方式。
这个机制对于分离概念和避免外部不相关逻辑“污染”主要逻辑很有用处。 
记忆化 <https://en.wikipedia.org/wiki/Memoization#Overview> 或缓存就是一个
很好的使用装饰器的例子：您需要在table中储存一个耗时函数的结果，并且下次能直接使用该结果，
而不是再计算一次。这显然不属于函数的逻辑部分。

3. if-else 是一种根据条件来分派操作或者返回不同值的策略
而dictionary是根据key值的不同来返回不同的值的，而因为value值可以是函数，所以dict也可以用来分派操作。
我们可以使用dictionary来替代多分支的if-else；

前两章描述了两种编程基本要素即函数和数据之间的紧密联系。我们看到可以使用高阶函数将函数当作数据来操纵。
我们也看到通过消息传递（message passing）和对象系统（object system）怎样使得数据被赋予行为。

3+. 实现generic function的四种方法，很典型很有启发。

3++. 《Composing Programs》中，实现class和instance那一节要多看几遍。

4. Lisp中
单元测试例子中，利用词法作用域规则，实现完整路径；（《Practical Common Lisp》）
声明全局变量dpath，每进入一层函数调用，即使用let绑定路径dpath，这样的话，每一层都有自己的dpath。

5. Lisp中使用宏实现词法抽象。

5+. Lisp 在代码中写代码
！！！！！！在代码中写代码：
(list 'define 'list)
(define list)
约翰麦卡锡问，python能像lisp那样自如的将代码当作数据一样处理吗？
Python是否能如Lisp那样优雅地像处理数据一样处理代码。
Ruby能像数据那样使用列表结构吗？那每次算加和减的时候，都得进行解析啰？
这方面Ruby还不如1960年的Lisp。

6. 数据生成，过滤，map，累积（《SICP》）
data enumerate
data filter
data map
data accumulate

7. 相互调用的递归
那个分形的三角形嵌套。

8. 数据抽象（rational number）
constructor and selector
抽象屏障，abstraction barrier

9. 典型数据结构
无序表
有序表
二叉树
hashing（python的set即使用此技术）

10. recursive objects（《composing programs chapter2》）

11.
def improve(update, done, guess=1, max_updates=1000):
        k = 0
        try:
            while not done(guess) and k < max_updates:
                guess = update(guess)
                k = k + 1
            return guess
        except ValueError:
            raise IterImproveError(guess)

12. 控制大系统的复杂度（《SICP 课程》）
**黑盒抽象
**按约定实现相应接口
(* x (+ a1 a2))
a1, a2 可以是数值，多项式，向量，甚至是电信号。如何用一个通用符号来表示它们?
conventional interfaces
**generic operations
**large-scale structure and modularity
**object-oriented programming
各部分间相互传递信息，联系起来
**operations on aggregates
关于聚集的操作，称作“流”

**定义新语言
Metalinguistic abstraction
元语言抽象，主要讨论如何建立一门新语言。

13. 映射（数学，线性代数。思想之重要）
值——值（数值）的映射
空间——空间 的映射
过程——过程 的映射

14. 关注语言最本质的部分
primitive objects
 primitive procedures
 primitive data
 
means of combination
 procedure composition
 constructure of compound data

means of abstraction
 procedure definition
 simple data abstraction

capturing common patterns
 higher-order procedures
 data as procedures ???
 
15. 创建局部表格《SICP》page204
处理多个表格的方法：除了以表格作为参数外，还可以创建局部表格。
Another way to deal with multiple tables is to have separate lookup and insert! procedures 
for each table. We can do this by representing a table procedurally,（过程地） as an object that maintains 
an internal table as part of its local state.

16. 上下文管理器
上下文管理器是一个Python对象，为操作提供了额外的上下文信息。 这种额外的信息， 在使用 with 语句初始化上下文，
以及完成 with 块中的所有代码时，采用可调用的形式。















