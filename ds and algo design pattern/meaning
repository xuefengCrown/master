
We present several design patterns in this book, and we show how they can be
consistently applied to implementations of data structures and algorithms. These
design patterns fall into two groups—patterns for solving algorithm design problems 
and patterns for solving software engineering problems. The algorithm design
patterns we discuss include the following:
# 算法设计模式
• Recursion (Chapter 4)
• Amortization (Sections 5.3 and 11.4) 分摊
• Divide-and-conquer (Section 12.2.1)
• Prune-and-search, also known as decrease-and-conquer (Section 12.7.1)
• Brute force (Section 13.2.1) 暴力求解
• Dynamic programming (Section 13.3).
• The greedy method (Sections 13.4.2, 14.6.2, and 14.7)

# 软件工程设计模式
Likewise, the software engineering design patterns we discuss include:
• Iterator (Sections 1.8 and 2.3.4)
• Adapter (Section 6.1.2)
• Position (Sections 7.4 and 8.1.2)
• Composition (Sections 7.6.1, 9.2.1, and 10.1.4)
• Template method (Sections 2.4.3, 8.4.6, 10.1.3, 10.5.2, and 11.2.1)
• Locator (Section 9.5.1)
• Factory method (Section 11.2.1)


Software Development
Traditional software development involves several phases. Three major steps are:
1. Design
2. Implementation
3. Testing and Debugging



