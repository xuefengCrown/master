

P-4.25 Provide a nonrecursive implementation of the draw interval function for
the English ruler project of Section 4.1.2. There should be precisely 2c−1
lines of output if c represents the length of the center tick. If incrementing
a counter from 0 to 2c−2, the number of dashes for each tick line should
be exactly one more than the number of consecutive 1’s at the end of the
binary representation of the counter.

P-4.26 Write a program that can solve instances of the Tower of Hanoi problem
(from Exercise C-4.14).

P-4.27 Python’s os module provides a function with signature walk(path) that
is a generator yielding the tuple (dirpath, dirnames, filenames) for each
subdirectory of the directory identified by string path, such that string
dirpath is the full path to the subdirectory, dirnames is a list of the names
of the subdirectories within dirpath, and filenames is a list of the names
of non-directory entries of dirpath. For example, when visiting the cs016
subdirectory of the file system shown in Figure 4.6, the walk would yield
( /user/rt/courses/cs016 , [ homeworks , programs ], [ grades ]) .
Give your own implementation of such a walk function.


P-2.33 Write a Python program that inputs a polynomial in standard algebraic
notation and outputs the first derivative of that polynomial.

P-2.34 Write a Python program that inputs a document and then outputs a bar-
chart plot of the frequencies of each alphabet character that appears in
that document.

P-2.35 Write a set of Python classes that can simulate an Internet application in
which one party, Alice, is periodically creating a set of packets that she
wants to send to Bob. An Internet process is continually checking if Alice
has any packets to send, and if so, it delivers them to Bob’s computer, and
Bob is periodically checking if his computer has a packet from Alice, and,
if so, he reads and deletes it.

P-2.36 Write a Python program to simulate an ecosystem containing two types
of creatures, bears and fish. The ecosystem consists of a river, which is
modeled as a relatively large list. Each element of the list should be a
Bear object, a Fish object, or None. In each time step, based on a random
process, each animal either attempts to move into an adjacent list location
or stay where it is. If two animals of the same type are about to collide in
the same cell, then they stay where they are, but they create anew instance
of that type of animal, which is placed in a random empty (i.e., previously
None) location in the list. If a bear and a fish collide, however, then the
fish dies (i.e., it disappears).


